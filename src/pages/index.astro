---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	<canvas>

	</canvas>
</Layout>

<script>
	import { collisions } from "../utils/collisions"
	const canvas = document.querySelector("canvas")
	const c = canvas.getContext("2d")

	canvas.width = 1024
	canvas.height = 576
	
	c.fillStyle = "white"
	c.fillRect(0, 0, canvas.width, canvas.height)

	const collisionsMap = []
	for (let i = 0; i < collisions.length; i += 90) {
		collisionsMap.push(collisions.slice(i, 90 + i))
	}

	interface BoundaryProps {
		position: { x: number; y: number }
	}

	class Boundary {
		position: BoundaryProps['position']
		width: number
		height: number

		static width = 48
		static height = 48

		constructor({ position}: BoundaryProps) {
			this.position = position
			this.width = 48
			this.height = 48
		}

		draw () {
			c.fillStyle = "rgba(255, 0, 0, 0)"
			c.fillRect(this.position.x, this.position.y, this.width, this.height)
		}
	}

	const boundaries = []

	const offset = {
		x: -688,
		y: -1130,
	}

	collisionsMap.forEach((row, i) => {
		row.forEach((symbol, j) => {
			if (symbol === 1025) {
				boundaries.push(new Boundary({ position: {
					x: j * Boundary.width + offset.x,
					y: i * Boundary.height + offset.y
				}}))
			}
		})
	})

	const image = new Image()
	image.src = "src/assets/img/garden_map.png"

	const playerDownImage = new Image()
	playerDownImage.src = "src/assets/img/playerDown.png"

	const playerUpImage = new Image()
	playerUpImage.src = "src/assets/img/playerUp.png"
	
	const playerLeftImage = new Image()
	playerLeftImage.src = "src/assets/img/playerLeft.png"

	const playerRightImage = new Image()
	playerRightImage.src = "src/assets/img/playerRight.png"

	const foregroundImage = new Image()
	foregroundImage.src = "src/assets/img/forground_one.png"
	
	const foregroundTwoImage = new Image()
	foregroundTwoImage.src = "src/assets/img/foreground_two.png"

	interface SpriteProps {
		position: { x: number; y: number }
		velocity?: number
		image: HTMLImageElement
		frames?: { max: number, val?: number, elapsed?: number }
		width?: number
		height?: number
		sprites?: {
			up: HTMLImageElement
			left: HTMLImageElement,
			right: HTMLImageElement,
			down: HTMLImageElement
		}
	}

	class Sprite {
		position: SpriteProps["position"]
		velocity: SpriteProps["velocity"]
		image: SpriteProps["image"]
		frames: SpriteProps["frames"]
		width: SpriteProps["width"]
		height: SpriteProps["height"]
		moving: boolean
		sprites: SpriteProps["sprites"]

		constructor({position, velocity, image, frames = { max: 1 }, sprites}: SpriteProps) {
			this.position = position
			this.velocity = velocity
			this.image = image
			this.frames = {...frames, val: 0, elapsed: 0}
			this.image.onload = () => {		
				this.width = this.image.width / this.frames.max
				this.height = this.image.height
			}
			this.moving = false
			this.sprites = sprites
		}

		draw() {
			c.drawImage(
				this.image,
				this.frames.val * this.width,
				0,
				this.image.width / this.frames.max,
				this.image.height,
				this.position.x,
				this.position.y,
				this.image.width / this.frames.max,
				this.image.height
			)
			
			if (!this.moving) return

			if (this.frames.max > 1) {
				this.frames.elapsed++
			}

			if (this.frames.elapsed % 10 === 0) {
				if (this.frames.val < this.frames.max - 1) this.frames.val++
				else this.frames.val = 0
			}

		}
	}

	const player = new Sprite({
		position: {
			x: canvas.width / 2 - (192 / 4) / 2,
			y: canvas.height / 2 - 68 / 2
		},
		image: playerDownImage,
		frames: {
			max: 4
		},
		sprites: {
			up: playerUpImage,
			left: playerLeftImage,
			right: playerRightImage,
			down: playerDownImage
		}
	})

	const background = new Sprite({ 
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: image
	})

	const foreground = new Sprite({ 
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: foregroundImage
	})

	const foregroundTwo = new Sprite({ 
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: foregroundTwoImage
	})

	const keys = {
		w: {
			pressed: false
		},
		a: {
			pressed: false
		},
		s: {
			pressed: false
		},
		d: {
			pressed: false
		},
	}


	const movables = [background, ...boundaries, foreground, foregroundTwo]

	const rectangularCollision = ({ rectangle1, rectangle2 }) => {
		return (
			rectangle1.position.x + rectangle1.width >= rectangle2.position.x + 3 &&
			rectangle1.position.x <= rectangle2.position.x + rectangle2.width - 3 &&
			rectangle1.position.y <= rectangle2.position.y + rectangle2.height - 33 &&
			rectangle1.position.y + rectangle1.height >= rectangle2.position.y + 6
		)
	}

	const animate = () => {
		window.requestAnimationFrame(animate)
		background.draw()
		boundaries.forEach(boundary => {
			boundary.draw()
		})
		player.draw()
		foreground.draw()
		foregroundTwo.draw()

		let moving = true
		player.moving = false
		if (keys.w.pressed && lastKey === "w") {
			player.moving = true
			player.image = player.sprites.up
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {...boundary, position: {
							x: boundary.position.x,
							y: boundary.position.y + 3
						}}
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
			movables.forEach(movable => { 
				movable.position.y += 3
			})
		}
		else if (keys.a.pressed && lastKey === "a") {
			player.moving = true
			player.image = player.sprites.left
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {...boundary, position: {
							x: boundary.position.x + 3,
							y: boundary.position.y
						}}
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
			movables.forEach(movable => { 
				movable.position.x += 3
			})
		}
		else if (keys.s.pressed && lastKey === "s") {
			player.moving = true
			player.image = player.sprites.down
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {...boundary, position: {
							x: boundary.position.x,
							y: boundary.position.y - 3
						}}
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
			movables.forEach(movable => { 
				movable.position.y -= 3
			})
		}
		else if (keys.d.pressed && lastKey === "d") {
			player.moving = true
			player.image = player.sprites.right
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {...boundary, position: {
							x: boundary.position.x - 3,
							y: boundary.position.y
						}}
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
			movables.forEach(movable => { 
				movable.position.x -= 3
			})
		}

	}

	animate()

	let lastKey = ""

	window.addEventListener("keydown", (e) => {
		switch (e.key) {
			case "w":
				keys.w.pressed = true
				lastKey = "w"
				break;

			case "a":
				keys.a.pressed = true
				lastKey = "a"
				break;

			case "s":
				keys.s.pressed = true
				lastKey = "s"
				break;

			case "d":
				keys.d.pressed = true
				lastKey = "d"
				break;
		
			default:
				break;
		}
	})

	window.addEventListener("keyup", (e) => {
		switch (e.key) {
			case "w":
				keys.w.pressed = false
				break;

			case "a":
				keys.a.pressed = false
				break;

			case "s":
				keys.s.pressed = false
				break;

			case "d":
				keys.d.pressed = false
				break;
		
			default:
				break;
		}
	})

</script>

<style>

</style>
