---
import LoadingScreen from "../components/LoadingScreen.astro"
import { Modal } from "../components/Modal"
import Layout from "../layouts/Layout.astro"
---

<Layout title="Welcome to Astro.">
	<div class="canvas-container">
		<canvas> </canvas>
		<LoadingScreen />
		<Modal client:load />
	</div>
</Layout>

<script>
	import { collisions } from "../utils/collisions"
	import confetti from "canvas-confetti"
	import { $isModalOpen } from "../store/layout"

	const canvas = document.querySelector("canvas")
	const c = canvas.getContext("2d")

	canvas.width = 1024
	canvas.height = 576

	c.fillStyle = "rgb(91, 255, 255)"
	c.fillRect(0, 0, canvas.width, canvas.height)

	const collisionsMap = []
	for (let i = 0; i < collisions.length; i += 90) {
		collisionsMap.push(collisions.slice(i, 90 + i))
	}

	interface BoundaryProps {
		position: { x: number; y: number }
		width?: number
		height?: number
	}

	class Boundary {
		position: BoundaryProps["position"]
		width: number
		height: number

		static width = 48
		static height = 48

		constructor({ position, width = 48, height = 48 }: BoundaryProps) {
			this.position = position
			this.width = width
			this.height = height
		}

		draw() {
			c.fillStyle = "rgba(255, 0, 0, 0)"
			c.fillRect(this.position.x, this.position.y, this.width, this.height)
		}
	}

	const boundaries = []

	const offset = {
		x: -688,
		y: -1130,
	}

	collisionsMap.forEach((row, i) => {
		row.forEach((symbol, j) => {
			if (symbol === 1025) {
				boundaries.push(
					new Boundary({
						position: {
							x: j * Boundary.width + offset.x,
							y: i * Boundary.height + offset.y,
						},
					})
				)
			}
		})
	})

	const image = new Image()
	image.src = "/garden_map.png"

	const playerDownImage = new Image()
	playerDownImage.src = "/playerDown.png"

	const playerUpImage = new Image()
	playerUpImage.src = "/playerUp.png"

	const playerLeftImage = new Image()
	playerLeftImage.src = "/playerLeft.png"

	const playerRightImage = new Image()
	playerRightImage.src = "/playerRight.png"

	const foregroundImage = new Image()
	foregroundImage.src = "/forground_one.png"

	const foregroundTwoImage = new Image()
	foregroundTwoImage.src = "/foreground_two.png"

	const letterImage = new Image()
	letterImage.src = "/letter.png"

	interface SpriteProps {
		position: { x: number; y: number }
		velocity?: number
		image: HTMLImageElement
		frames?: { max: number; val?: number; elapsed?: number }
		width?: number
		height?: number
		sprites?: {
			up: HTMLImageElement
			left: HTMLImageElement
			right: HTMLImageElement
			down: HTMLImageElement
		}
	}

	class Sprite {
		position: SpriteProps["position"]
		velocity: SpriteProps["velocity"]
		image: SpriteProps["image"]
		frames: SpriteProps["frames"]
		width: SpriteProps["width"]
		height: SpriteProps["height"]
		moving: boolean
		sprites: SpriteProps["sprites"]

		constructor({
			position,
			velocity,
			image,
			frames = { max: 1 },
			sprites,
		}: SpriteProps) {
			this.position = position
			this.velocity = velocity
			this.image = image
			this.frames = { ...frames, val: 0, elapsed: 0 }
			this.image.onload = () => {
				this.width = this.image.width / this.frames.max
				this.height = this.image.height
			}
			this.moving = false
			this.sprites = sprites
		}

		draw() {
			c.drawImage(
				this.image,
				this.frames.val * this.width,
				0,
				this.image.width / this.frames.max,
				this.image.height,
				this.position.x,
				this.position.y,
				this.image.width / this.frames.max,
				this.image.height
			)

			if (!this.moving) return

			if (this.frames.max > 1) {
				this.frames.elapsed++
			}

			if (this.frames.elapsed % 10 === 0) {
				if (this.frames.val < this.frames.max - 1) this.frames.val++
				else this.frames.val = 0
			}
		}
	}

	const player = new Sprite({
		position: {
			x: canvas.width / 2 - 192 / 4 / 2,
			y: canvas.height / 2 - 68 / 2,
		},
		image: playerDownImage,
		frames: {
			max: 4,
		},
		sprites: {
			up: playerUpImage,
			left: playerLeftImage,
			right: playerRightImage,
			down: playerDownImage,
		},
	})

	const background = new Sprite({
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: image,
	})

	const foreground = new Sprite({
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: foregroundImage,
	})

	const foregroundTwo = new Sprite({
		position: {
			x: offset.x,
			y: offset.y,
		},
		velocity: 1,
		image: foregroundTwoImage,
	})

	const letter = new Sprite({
		position: {
			x: 2555,
			y: -430,
		},
		velocity: 1,
		image: letterImage,
	})

	const textBoundary = new Boundary({
		position: {
			x: 118,
			y: 520,
		},
		height: 162,
		width: 384,
	})

	const letterBoundary = new Boundary({
		position: {
			x: 2555,
			y: -430,
		},
	})

	const keys = {
		w: {
			pressed: false,
		},
		a: {
			pressed: false,
		},
		s: {
			pressed: false,
		},
		d: {
			pressed: false,
		},
	}

	const movables = [
		background,
		...boundaries,
		foreground,
		foregroundTwo,
		textBoundary,
		letter,
		letterBoundary,
	]

	const rectangularCollision = ({ rectangle1, rectangle2 }) => {
		return (
			rectangle1.position.x + rectangle1.width >= rectangle2.position.x + 3 &&
			rectangle1.position.x <= rectangle2.position.x + rectangle2.width - 3 &&
			rectangle1.position.y <= rectangle2.position.y + rectangle2.height - 33 &&
			rectangle1.position.y + rectangle1.height >= rectangle2.position.y + 6
		)
	}

	let confettiLaunched = false
	let isLetterOpen = false

	const animate = () => {
		window.requestAnimationFrame(animate)
		background.draw()
		boundaries.forEach((boundary) => {
			boundary.draw()
		})
		letter.draw()
		player.draw()
		foreground.draw()
		foregroundTwo.draw()
		textBoundary.draw()

		let moving = true
		player.moving = false
		if (keys.w.pressed && lastKey === "w") {
			player.moving = true
			player.image = player.sprites.up
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {
							...boundary,
							position: {
								x: boundary.position.x,
								y: boundary.position.y + 3,
							},
						},
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
				movables.forEach((movable) => {
					movable.position.y += 3
				})
		} else if (keys.a.pressed && lastKey === "a") {
			player.moving = true
			player.image = player.sprites.left
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {
							...boundary,
							position: {
								x: boundary.position.x + 3,
								y: boundary.position.y,
							},
						},
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
				movables.forEach((movable) => {
					movable.position.x += 3
				})
		} else if (keys.s.pressed && lastKey === "s") {
			player.moving = true
			player.image = player.sprites.down
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {
							...boundary,
							position: {
								x: boundary.position.x,
								y: boundary.position.y - 3,
							},
						},
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
				movables.forEach((movable) => {
					movable.position.y -= 3
				})
		} else if (keys.d.pressed && lastKey === "d") {
			player.moving = true
			player.image = player.sprites.right
			for (let i = 0; i < boundaries.length; i++) {
				const boundary = boundaries[i]
				if (
					rectangularCollision({
						rectangle1: player,
						rectangle2: {
							...boundary,
							position: {
								x: boundary.position.x - 3,
								y: boundary.position.y,
							},
						},
					})
				) {
					console.log("colliding")
					moving = false
					break
				}
			}

			if (moving)
				movables.forEach((movable) => {
					movable.position.x -= 3
				})
		}

		if (
			rectangularCollision({ rectangle1: player, rectangle2: textBoundary })
		) {
			if (!confettiLaunched) {
				var scalar = 2
				var sunflower = confetti.shapeFromText({ text: "游꺝", scalar })

				var defaults = {
					spread: 360,
					ticks: 60,
					gravity: 0,
					decay: 0.96,
					startVelocity: 20,
					shapes: [sunflower],
					scalar,
				}

				function shoot() {
					confetti({
						...defaults,
						particleCount: 30,
					})

					confetti({
						...defaults,
						particleCount: 5,
						flat: true,
					})

					confetti({
						...defaults,
						particleCount: 15,
						scalar: scalar / 2,
						shapes: ["circle"],
					})
				}

				setTimeout(shoot, 0)
				setTimeout(shoot, 100)
				setTimeout(shoot, 200)
				confettiLaunched = true // Evita que se vuelva a lanzar
			}
		} else {
			confettiLaunched = false // Reinicia el lanzamiento si el jugador no est치 en colisi칩n
		}

		if (
			rectangularCollision({ rectangle1: player, rectangle2: letterBoundary })
		) {
			if (!isLetterOpen) {
				$isModalOpen.set(true)
				isLetterOpen = true // Evita que se vuelva a lanzar
			}
		} else {
			$isModalOpen.set(false)
			isLetterOpen = false // Reinicia el lanzamiento si el jugador no est치 en colisi칩n
		}
	}

	animate()

	let lastKey = ""

	window.addEventListener("keydown", (e) => {
		switch (e.key) {
			case "w":
				keys.w.pressed = true
				lastKey = "w"
				break

			case "a":
				keys.a.pressed = true
				lastKey = "a"
				break

			case "s":
				keys.s.pressed = true
				lastKey = "s"
				break

			case "d":
				keys.d.pressed = true
				lastKey = "d"
				break

			default:
				break
		}
	})

	window.addEventListener("keyup", (e) => {
		switch (e.key) {
			case "w":
				keys.w.pressed = false
				break

			case "a":
				keys.a.pressed = false
				break

			case "s":
				keys.s.pressed = false
				break

			case "d":
				keys.d.pressed = false
				break

			default:
				break
		}
	})
</script>

<style>
	.canvas-container {
		position: relative;
		background: rgb(97, 81, 73);
		padding: 35px;
		border: rgb(179, 177, 91) solid 4px;
		box-shadow: 10px 6px 24px -8px rgba(102, 87, 64, 0.75);
		-webkit-box-shadow: 10px 6px 24px -8px rgba(102, 87, 64, 0.75);
		-moz-box-shadow: 10px 6px 24px -8px rgba(102, 87, 64, 0.75);
	}
	canvas {
		display: inline-block;
		border: rgb(167, 165, 84) solid 4px;
		background: rgb(91, 255, 255);
		width: 1024px;
		height: 576px;
	}
</style>
